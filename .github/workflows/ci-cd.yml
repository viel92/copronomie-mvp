# CI/CD Pipeline pour Copronomie MVP
name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEB: ${{ github.repository }}-web
  IMAGE_NAME_API: ${{ github.repository }}-api

jobs:
  # Tests et Build
  test-and-build:
    name: Tests & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.14.0

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint
        continue-on-error: true

      - name: Type check
        run: pnpm run type-check

      - name: Build API
        run: pnpm --filter @copronomie/api build

      - name: Build Web
        run: pnpm --filter @copronomie/web build
        env:
          NEXT_PUBLIC_API_URL: https://staging-api.copronomie.fr
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Run E2E Tests
        run: pnpm run test:e2e
        continue-on-error: true
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Build et Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging VPS
  deploy-staging:
    name: Deploy to Staging VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_VPS_HOST }}
          username: ${{ secrets.STAGING_VPS_USER }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          script: |
            # Navigate to app directory
            cd /home/copronomie/copronomie-mvp

            # Pull latest code
            git pull origin master

            # Pull latest Docker images from GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository }}-web:latest
            docker pull ghcr.io/${{ github.repository }}-api:latest

            # Update docker-compose to use new images
            sed -i 's|image: copronomie-mvp-web|image: ghcr.io/${{ github.repository }}-web:latest|g' docker-compose.yml
            sed -i 's|image: copronomie-mvp-api|image: ghcr.io/${{ github.repository }}-api:latest|g' docker-compose.yml

            # Restart containers with new images
            docker compose down
            docker compose up -d --force-recreate

            # Wait for services to be ready
            sleep 30

            # Health checks
            curl -f http://localhost:3000 || exit 1
            curl -f http://localhost:4000/health || exit 1

            # Clean up old images
            docker image prune -f

      - name: Verify HTTPS endpoints
        run: |
          echo "Checking HTTPS endpoints..."
          curl -f https://staging-app.copronomie.fr || exit 1
          curl -f https://staging-api.copronomie.fr/health || exit 1
          echo "‚úÖ All endpoints are healthy!"

  # Notification
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [test-and-build, build-and-push, deploy-staging]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Copronomie MVP Staging is live!"
          echo "Frontend: https://staging-app.copronomie.fr"
          echo "API: https://staging-api.copronomie.fr"

      - name: Notify failure
        if: needs.test-and-build.result == 'failure' || needs.build-and-push.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for more details."
          exit 1
